node('master')
{
    tool name: 'java8', type: 'jdk'
    tool name: 'gradle3.3', type: 'gradle'

withEnv(["JAVA_HOME=${ tool 'java8' }", "PATH+GRADLE=${tool 'gradle3.3'}/bin", "PATH+JAVA=${tool 'java8'}/bin"]) { 
try { 
stage ('Preparation (Checking out).')
    {
    git branch: 'akutsko', url: 'https://github.com/MNT-Lab/mntlab1-pipeline.git'
    }
echo 'Preparation succeeded!'}
catch (Error) {echo "Preparation failed: ${Error}"}

try {
stage ('Building code'){sh 'gradle build'}
echo 'Building code succeeded!'}
catch (Error) {echo "Building code failed: ${Error}"}

try {
stage ('Testing code'){
    parallel Unit_Test: {sh 'gradle test'
             }, Jacoco_Test: {sh 'gradle jacoco'
             }, cucumber_Test: {sh 'gradle cucumber'
             }
    }
echo 'Testing code succeeded!'}
catch (Error) {echo "Testing code failed: ${Error}"}

try {
stage ('Triggering job and fetching artefact after finishing'){
    build job: 'MNTLAB-akutsko-child1-build-job', parameters: [string(name: 'BRANCH_NAME', value: 'akutsko')], quietPeriod: 0
    step ([$class: 'CopyArtifact',
          projectName: 'MNTLAB-akutsko-child1-build-job',
          filter: 'akutsko_dsl_script.tar.gz']);
    }
echo 'Triggering job and fetching artefact after finishing succeeded!'}
catch (Error) {echo "Triggering job and fetching artefact after finishing failed: ${Error}"}

try {
stage ('Packaging and Publishing results'){
    sh 'cp build/libs/$(basename "$PWD").jar akutsko-v1.${BUILD_NUMBER}.jar'
    sh 'tar -xf akutsko_dsl_script.tar.gz jobs.groovy'
    sh 'tar -cvzf pipeline-akutsko-${BUILD_NUMBER}.tar.gz jobs.groovy Jenkinsfile  akutsko-v1.${BUILD_NUMBER}.jar'
    archiveArtifacts artifacts: 'pipeline-akutsko-${BUILD_NUMBER}.tar.gz', excludes: null
    }
echo 'Packaging and Publishing results succeeded!'}
catch (Error) {echo "Packaging and Publishing results failed: ${Error}"}

try {
stage ('Asking for manual approval'){
    input message: 'Do you want to deploy this artefact?', ok: 'Deploy'
    }
echo 'Deployment was aprove!'}
catch (Error) {echo "Deployment was aprove!: ${Error}"}

try { 
stage ('Deployment'){
    sh 'tar -xf pipeline-akutsko-${BUILD_NUMBER}.tar.gz akutsko-v1.${BUILD_NUMBER}.jar'
    sh 'java -jar akutsko-v1.${BUILD_NUMBER}.jar'
    }
echo 'Deployment succeeded!'}
catch (Error) {echo "Deployment failed: ${Error}"}

stage ('Sending status'){
   
            if (currentBuild.result == 'FAILURE')
            {
                echo "${Error}"
            }
            else
            {
                echo "SUCCESS"
            }
    }

}
}
